{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MoneyDisplay","props","Math","round","this","mintRate","className","money","React","Component","CapitalProduct","desc","name","benefit","style","display","justifyContent","cost","owned","MoneyMintingSimulator","state","capitalProducts","slaveArtist","randomPrinter","mintingMachine","bitcoinMiner","setInterval","setState","updateCapitalProductsJSX","document","title","capitalProductsJSX","productName","push","onClick","purchaseAttempt","product","console","log","overflow","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a0aa297c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nclass MoneyDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h2> My Money </h2>\n        <h2>\n          Passive Mint Rate: {Math.round(this.props.mintRate * 100) / 100}\n        </h2>\n        <p className=\"moneyDisplay\">\n          {Math.round(this.props.money * 100) / 100}\n        </p>\n      </div>\n    );\n  }\n}\n\nclass CapitalProduct extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"capitalProduct\">\n        <h3> {this.props.desc.name} </h3>\n        {this.props.desc.benefit} monies/s\n        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\n          <p> Cost: {this.props.desc.cost} </p>\n          <p> Owned: {this.props.desc.owned}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass MoneyMintingSimulator extends React.Component {\n  componentDidMount() {\n    document.title=\"Money Minting Simulator\";\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      money: 0,\n      mintRate: 0,\n      capitalProducts: {\n        slaveArtist: {\n          name: \"Slave Artist\",\n          benefit: 0.01,\n          cost: 10,\n          owned: 0,\n        },\n        randomPrinter: {\n          name: \"Random Printer\",\n          benefit: 0.5,\n          cost: 100,\n          owned: 0,\n        },\n        mintingMachine: {\n          name: \"Minting Machine\",\n          benefit: 10,\n          cost: 1000,\n          owned: 0,\n        },\n        bitcoinMiner: {\n          name: \"Bitcoin Miner\",\n          benefit: 200,\n          cost: 10000,\n          owned: 0,\n        },\n      },\n    };\n    setInterval(() => {\n      this.setState({\n        money: this.state.money + this.state.mintRate,\n      });\n\n    }, 1000);\n    this.updateCapitalProductsJSX();\n  }\n\n  updateCapitalProductsJSX() {\n    var capitalProductsJSX = [];\n    for (let productName in this.state.capitalProducts) {\n      capitalProductsJSX.push(\n        <div onClick={() => this.purchaseAttempt(productName)}>\n          <CapitalProduct desc={this.state.capitalProducts[productName]} />\n        </div>\n      );\n    }\n    this.state.capitalProductsJSX = capitalProductsJSX;\n  }\n  purchaseAttempt(productName) {\n    \n    const product = this.state.capitalProducts[productName];\n    if (product.cost > this.state.money) {\n      console.log(\"Not enough money\");\n    } else {\n      this.setState({\n        money: this.state.money - product.cost,\n        capitalProducts: {\n          ...this.state.capitalProducts,\n          [productName]: {\n            ...product,\n            owned: product.owned + 1,\n          },\n        },\n        mintRate: this.state.mintRate + product.benefit,\n      });\n\n    }\n    console.log(this.state.capitalProducts);\n\n  }\n  render() {\n    this.updateCapitalProductsJSX(); // need to update capitalProductsJSX after product purchase\n    return (\n      <div>\n        <h1> Money Minting Simulator </h1>\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <div className=\"myMoney\">\n            <MoneyDisplay\n              money={this.state.money}\n              mintRate={this.state.mintRate}\n            />\n\n            <button\n              className=\"moneyButton\"\n              onClick={() => {\n                this.setState({ money: this.state.money + 1 });\n              }}\n            >\n              Increment\n            </button>\n          </div>\n          <div className=\"myShop\">\n            <h2 className=\"shopTitle\"> Capital Shop </h2>\n\n            <div style={{ overflow: \"scroll\", height: \"400px\" }}>\n              {this.state.capitalProductsJSX}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MoneyMintingSimulator;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}